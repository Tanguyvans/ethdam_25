/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ChallengeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "challengeCount"
      | "challenges"
      | "claimStake"
      | "createChallenge"
      | "validateChallenge"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChallengeClaimed"
      | "ChallengeCreated"
      | "ChallengeValidated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "challengeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateChallenge",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "challengeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateChallenge",
    data: BytesLike
  ): Result;
}

export namespace ChallengeClaimedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, user: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    amount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    amount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeValidatedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChallengeManager extends BaseContract {
  connect(runner?: ContractRunner | null): ChallengeManager;
  waitForDeployment(): Promise<this>;

  interface: ChallengeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  challengeCount: TypedContractMethod<[], [bigint], "view">;

  challenges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, boolean] & {
        user: string;
        amount: bigint;
        deadline: bigint;
        completed: boolean;
        claimed: boolean;
      }
    ],
    "view"
  >;

  claimStake: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  createChallenge: TypedContractMethod<
    [_deadline: BigNumberish],
    [void],
    "payable"
  >;

  validateChallenge: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "challengeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, boolean] & {
        user: string;
        amount: bigint;
        deadline: bigint;
        completed: boolean;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimStake"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createChallenge"
  ): TypedContractMethod<[_deadline: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "validateChallenge"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ChallengeClaimed"
  ): TypedContractEvent<
    ChallengeClaimedEvent.InputTuple,
    ChallengeClaimedEvent.OutputTuple,
    ChallengeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeCreated"
  ): TypedContractEvent<
    ChallengeCreatedEvent.InputTuple,
    ChallengeCreatedEvent.OutputTuple,
    ChallengeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeValidated"
  ): TypedContractEvent<
    ChallengeValidatedEvent.InputTuple,
    ChallengeValidatedEvent.OutputTuple,
    ChallengeValidatedEvent.OutputObject
  >;

  filters: {
    "ChallengeClaimed(uint256,address,uint256)": TypedContractEvent<
      ChallengeClaimedEvent.InputTuple,
      ChallengeClaimedEvent.OutputTuple,
      ChallengeClaimedEvent.OutputObject
    >;
    ChallengeClaimed: TypedContractEvent<
      ChallengeClaimedEvent.InputTuple,
      ChallengeClaimedEvent.OutputTuple,
      ChallengeClaimedEvent.OutputObject
    >;

    "ChallengeCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      ChallengeCreatedEvent.InputTuple,
      ChallengeCreatedEvent.OutputTuple,
      ChallengeCreatedEvent.OutputObject
    >;
    ChallengeCreated: TypedContractEvent<
      ChallengeCreatedEvent.InputTuple,
      ChallengeCreatedEvent.OutputTuple,
      ChallengeCreatedEvent.OutputObject
    >;

    "ChallengeValidated(uint256)": TypedContractEvent<
      ChallengeValidatedEvent.InputTuple,
      ChallengeValidatedEvent.OutputTuple,
      ChallengeValidatedEvent.OutputObject
    >;
    ChallengeValidated: TypedContractEvent<
      ChallengeValidatedEvent.InputTuple,
      ChallengeValidatedEvent.OutputTuple,
      ChallengeValidatedEvent.OutputObject
    >;
  };
}
