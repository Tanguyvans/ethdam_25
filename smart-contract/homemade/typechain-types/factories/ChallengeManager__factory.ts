/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ChallengeManager,
  ChallengeManagerInterface,
} from "../ChallengeManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ChallengeClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "ChallengeCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ChallengeValidated",
    type: "event",
  },
  {
    inputs: [],
    name: "challengeCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "challenges",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "completed",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "claimStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
    ],
    name: "createChallenge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "validateChallenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105dc806100206000396000f3fe60806040526004361061004a5760003560e01c806344c7d6ef1461004f57806379c30f41146100715780638f1d3776146100915780639264180b14610124578063a2f0572514610137575b600080fd5b34801561005b57600080fd5b5061006f61006a366004610566565b61015b565b005b34801561007d57600080fd5b5061006f61008c366004610566565b6102fe565b34801561009d57600080fd5b506100e96100ac366004610566565b60006020819052908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff8082169161010090041685565b604080516001600160a01b039096168652602086019490945292840191909152151560608301521515608082015260a0015b60405180910390f35b61006f610132366004610566565b610429565b34801561014357600080fd5b5061014d60015481565b60405190815260200161011b565b6000818152602081905260409020600381015460ff166101c25760405162461bcd60e51b815260206004820152601760248201527f4368616c6c656e6765206e6f7420636f6d706c6574656400000000000000000060448201526064015b60405180910390fd5b80546001600160a01b031633146102105760405162461bcd60e51b81526020600482015260126024820152714e6f7420796f7572206368616c6c656e676560701b60448201526064016101b9565b6003810154610100900460ff161561025c5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b60448201526064016101b9565b60038101805461ff001916610100179055805460018201546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156102aa573d6000803e3d6000fd5b5080546001820154604080518581526001600160a01b0390931660208401528201527f1c233f2d3a3b26b1c50abcdc4f2f3272b308c27bf04fed1c5ced0b39fe344138906060015b60405180910390a15050565b600081815260208190526040902080546001600160a01b031633146103655760405162461bcd60e51b815260206004820152601960248201527f4f6e6c792063726561746f722063616e2076616c69646174650000000000000060448201526064016101b9565b80600201544211156103a45760405162461bcd60e51b8152602060048201526008602482015267546f6f206c61746560c01b60448201526064016101b9565b600381015460ff16156103e85760405162461bcd60e51b815260206004820152600c60248201526b416c726561647920646f6e6560a01b60448201526064016101b9565b60038101805460ff191660011790556040517f168d7f91019007507c1bc9b89c2bacfb75a50757d83077c8036edad21e753f81906102f29084815260200190565b600034116104795760405162461bcd60e51b815260206004820152601760248201527f4e65656420746f207374616b6520736f6d657468696e6700000000000000000060448201526064016101b9565b6040805160a08101825233808252346020808401828152848601878152600060608088018281526080808a01848152600180548652858952948c90209a518b546001600160a01b0319166001600160a01b03909116178b5595518a850155935160028a01555160039098018054945161ffff1990951698151561ff00191698909817610100941515949094029390931790965594548651908152918201939093529384015282018390527f7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb910160405180910390a16001805490600061055e8361057f565b919050555050565b60006020828403121561057857600080fd5b5035919050565b60006001820161059f57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122067e0f44298993c2f0fdecd4283c260fa6ee21c1e2ba6da04eeb603455f006c5c64736f6c63430008130033";

type ChallengeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChallengeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChallengeManager__factory extends ContractFactory {
  constructor(...args: ChallengeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ChallengeManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ChallengeManager__factory {
    return super.connect(runner) as ChallengeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChallengeManagerInterface {
    return new Interface(_abi) as ChallengeManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ChallengeManager {
    return new Contract(address, _abi, runner) as unknown as ChallengeManager;
  }
}
